package com.brs.batch;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.beans.factory.annotation.Autowired;

import com.brs.entities.BrsBankStatementLineStg;
import com.brs.entities.BrsConsoldtStg;
import com.brs.entities.BrsConsotUpdateStg;
import com.brs.entities.BrsEbsStg;
import com.brs.entities.BrsError;
import com.brs.entities.BrsValidateStg;
import com.brs.repository.BrsErrorRepository;
import com.brs.service.BrsBankStmtService;
import com.brs.service.BrsDataService;
import com.brs.service.BrsEbsStgService;
import com.brs.service.BrsErrorService;
import com.brs.service.BrsUpdateStgService;
import com.brs.service.BrsValidateStgService;
import com.brs.util.AppConstants;
import com.brs.util.BrsDataUtil;

public class BrsDataItemProcessor implements ItemProcessor<BrsConsoldtStg, List<BrsConsoldtStg>> {

	Logger log = LoggerFactory.getLogger(BrsDataItemProcessor.class);

	@Autowired
	private BrsDataService brsDataService;

	@Autowired
	private BrsBankStmtService brsBankStmtService;

	@Autowired
	private BrsUpdateStgService brsUpdateStgService;

	@Autowired
	private BrsEbsStgService brsEbsService;

	@Autowired
	private BrsDataUtil util;
	
	@Autowired
	private BrsErrorService errorService;
	
	@Autowired
	private BrsValidateStgService brsValidateService;

	@Override
	public List<BrsConsoldtStg> process(BrsConsoldtStg brsData) {

		log.info("Input to ItemProcessor {}", brsData.getUniqueRef() +" | "+brsData.getBankAcNo()+" | "+brsData.getPaymentMode()+" | "+brsData.getCrAmt()+" | "+brsData.getDrAmt()+" | "+brsData.getVoucherDate());

		List<BrsConsoldtStg> bookStmtList = new ArrayList<BrsConsoldtStg>();
		List<BrsBankStatementLineStg> bankStmtList = new ArrayList<BrsBankStatementLineStg>();
		List<BrsEbsStg> brsEbsList = new ArrayList<BrsEbsStg>();

		BrsConsotUpdateStg brsUpdateStg = null;

		String paymentMode = brsData.getPaymentMode();
//		String uniqueRefNo = util.genUniqueReference(brsData);
		String uniqueRefNo = brsData.getUniqueRef();
		String bankAcNo = brsData.getBankAcNo();

		Long chequeId = brsData.getCheqId();

		boolean loadFlag = false;
		
		Long refId=brsData.getId();
		
		List<BrsValidateStg> brsValidateList=null;
		
		
		boolean processedRecord=false;
		String processedUnmatchNum="";
		
		
		if(brsData.getProcessFlag().equals("R")) {
			processedRecord=true;
			processedUnmatchNum=brsValidateService.getUnmatchRefNumFromValidateStg(bankAcNo, uniqueRefNo);
			System.out.println("processedUnmatchNum "+processedUnmatchNum);
		}
		
		try {
			
			/**
			 * If bank account no. is missing in the staging table then we will mark this as
			 * unreconciled
			 */
			if (bankAcNo == null || bankAcNo.equals("")) {
//				String unmatchRef = util.getBkcRefId();
				String unmatchRef ="";
				if(processedRecord&&processedUnmatchNum!=null&&!"".equals(processedUnmatchNum)) {
					unmatchRef=processedUnmatchNum;
				}else {
					unmatchRef = util.getBkcRefId();
				}
				
				log.info("bankAcNo null ,UNMATCH NUMBER : {}", unmatchRef);
				for (BrsConsoldtStg book : bookStmtList) {
					book.setStatus(AppConstants.UNRECONCILED);
					book.setErrorMsg(AppConstants.BANKACNOERR);
				}
				
				brsEbsList = util.getBrsEBSList(bookStmtList, AppConstants.UNRECONCILED, AppConstants.BANKACNOERR, "",unmatchRef);
				if (brsEbsList != null && !brsEbsList.isEmpty()) {
					brsEbsService.saveEbsList(brsEbsList);
				}
				
				brsValidateList=util.getBrsValidateStgList(bookStmtList, AppConstants.UNRECONCILED, AppConstants.BANKACNOERR, "",unmatchRef);
				if (brsValidateList != null && !brsValidateList.isEmpty()) {
					brsValidateService.saveValidateList(brsValidateList);
				}
				
				return bookStmtList;
			}
	
			/**
			 * If the payment mode is not present in the staging table then we marked this
			 * book entry as unreconciled
			 */
			if (paymentMode == null || paymentMode.equals("")) {
				
				log.info("paymentMode null ");
				brsData.setStatus(AppConstants.UNRECONCILED);
				brsData.setErrorMsg(AppConstants.PAYMENTMODEERR);
	
				bookStmtList = new ArrayList<BrsConsoldtStg>();
				bookStmtList.add(brsData);
				
//				String unmatchRef=util.getBkcRefId();
				
				String unmatchRef ="";
				if(processedRecord&&processedUnmatchNum!=null&&!"".equals(processedUnmatchNum)) {
					unmatchRef=processedUnmatchNum;
				}else {
					unmatchRef = util.getBkcRefId();
				}
				
				brsEbsList = util.getBrsEBSList(bookStmtList, AppConstants.UNRECONCILED, AppConstants.PAYMENTMODEERR, "",unmatchRef);
	
				if (brsEbsList != null && !brsEbsList.isEmpty()) {
					brsEbsService.saveEbsList(brsEbsList);
				}
				
				brsValidateList=util.getBrsValidateStgList(bookStmtList, AppConstants.UNRECONCILED, AppConstants.PAYMENTMODEERR, "",unmatchRef);
				if (brsValidateList != null && !brsValidateList.isEmpty()) {
					brsValidateService.saveValidateList(brsValidateList);
				}
	
				return bookStmtList;
			}
	
			if (uniqueRefNo == null || uniqueRefNo.equals("")) {
				log.info("uniqueRefNo null ");
				/**
				 * If unique ref num is missing in staging table then we need to pick cheque id
				 * column in staging table and compare it the cheque id with update table, if
				 * cheque id is also missing then mark is as unreconciled
				 */
				if (chequeId == null || chequeId == 0) {
					brsData.setStatus(AppConstants.UNRECONCILED);
					brsData.setErrorMsg(AppConstants.CHEQUEIDERR);
	
					bookStmtList = new ArrayList<BrsConsoldtStg>();
					bookStmtList.add(brsData);
					
//					String unmatchRef=util.getBkcRefId();
					
					String unmatchRef ="";
					if(processedRecord&&processedUnmatchNum!=null&&!"".equals(processedUnmatchNum)) {
						unmatchRef=processedUnmatchNum;
					}else {
						unmatchRef = util.getBkcRefId();
					}
					
					brsEbsList = util.getBrsEBSList(bookStmtList, AppConstants.UNRECONCILED, AppConstants.CHEQUEIDERR, "",unmatchRef);
	
					if (brsEbsList != null && !brsEbsList.isEmpty()) {
						brsEbsService.saveEbsList(brsEbsList);
					}
					
					brsValidateList=util.getBrsValidateStgList(bookStmtList, AppConstants.UNRECONCILED, AppConstants.CHEQUEIDERR, "",unmatchRef);
					if (brsValidateList != null && !brsValidateList.isEmpty()) {
						brsValidateService.saveValidateList(brsValidateList);
					}
					return bookStmtList;
				}
	
				/**
				 * Fetching unique ref from update table using cheque id of the staging column
				 * if we are not getting records from update table using cheque id then mark
				 * this records as unreconciled
				 */
				brsUpdateStg = brsUpdateStgService.getBrsUpdateStgData(chequeId);
	
				if (brsUpdateStg != null) {
					uniqueRefNo = util.updateUniqueRef(brsData, brsUpdateStg);
	
					if (uniqueRefNo == null) {
	
						brsData.setStatus(AppConstants.UNRECONCILED);
						brsData.setErrorMsg(AppConstants.UNQREFNOTADDEDERR);
	
						bookStmtList = new ArrayList<BrsConsoldtStg>();
						bookStmtList.add(brsData);
//						String unmatchRef=util.getBkcRefId();
						String unmatchRef ="";
						if(processedRecord&&processedUnmatchNum!=null&&!"".equals(processedUnmatchNum)) {
							unmatchRef=processedUnmatchNum;
						}else {
							unmatchRef = util.getBkcRefId();
						}
						
						brsEbsList = util.getBrsEBSList(bookStmtList, AppConstants.UNRECONCILED,AppConstants.UNQREFNOTADDEDERR, "", unmatchRef);
	
						if (brsEbsList != null && !brsEbsList.isEmpty()) {
							brsEbsService.saveEbsList(brsEbsList);
						}
						
						
						brsValidateList=util.getBrsValidateStgList(bookStmtList, AppConstants.UNRECONCILED, AppConstants.UNQREFNOTADDEDERR, "",unmatchRef);
						if (brsValidateList != null && !brsValidateList.isEmpty()) {
							brsValidateService.saveValidateList(brsValidateList);
						}
						
						return bookStmtList;
					}
	
					/**
					 * As unique ref is not present in staging table so we are fetching unique ref
					 * from update table so rest of book entries of staging table will be fetched
					 * from cheque id and unique number will be updated
					 */
					bookStmtList = brsDataService.getBrsRecordsByChequeId(chequeId);
					loadFlag = true;
					for (BrsConsoldtStg obj : bookStmtList) {
						util.updateUniqueRef(obj, brsUpdateStg);
					}
	
				} else {
					brsData.setStatus(AppConstants.UNRECONCILED);
					brsData.setErrorMsg(AppConstants.UNQREFNOTFOUNDERR);
	
					bookStmtList = new ArrayList<BrsConsoldtStg>();
					bookStmtList.add(brsData);
					
//					String unmatchRef=util.getBkcRefId();
					String unmatchRef ="";
					if(processedRecord&&processedUnmatchNum!=null&&!"".equals(processedUnmatchNum)) {
						unmatchRef=processedUnmatchNum;
					}else {
						unmatchRef = util.getBkcRefId();
					}
					
					brsEbsList = util.getBrsEBSList(bookStmtList, AppConstants.UNRECONCILED, AppConstants.UNQREFNOTFOUNDERR,"", unmatchRef);
	
					if (brsEbsList != null && !brsEbsList.isEmpty()) {
						brsEbsService.saveEbsList(brsEbsList);
					}
					
					
					brsValidateList=util.getBrsValidateStgList(bookStmtList, AppConstants.UNRECONCILED, AppConstants.UNQREFNOTFOUNDERR, "",unmatchRef);
					if (brsValidateList != null && !brsValidateList.isEmpty()) {
						brsValidateService.saveValidateList(brsValidateList);
					}
	
					return bookStmtList;
				}
			}
	
			/**
			 * if rest of book entry is not loaded using cheque id then we load using the
			 * unique ref.
			 */
			if (!loadFlag) {
//				bookStmtList = brsDataService.getOtherRecords(paymentMode, uniqueRefNo,bankAcNo);
//				bookStmtList = brsDataService.getBrsRecords(uniqueRefNo,bankAcNo,uniqueRefNo,bankAcNo);
				
				bookStmtList = brsDataService.getBrsRecords(uniqueRefNo, bankAcNo);
				
//				List<BrsConsoldtStg> unreconList=brsDataService.getBrsUnreconRecords(uniqueRefNo, bankAcNo);
				List<BrsConsoldtStg> unreconList=brsDataService.getBrsUnreconRecords(uniqueRefNo, bankAcNo,uniqueRefNo, bankAcNo);
				if(unreconList!=null&&!unreconList.isEmpty()) {
					bookStmtList.addAll(unreconList);
				}
				
				
			}
	
			log.info("Book Enteries with matching unq ref : "+bookStmtList.size());
	
	
			/**
			 * Check unique ref from unreconciled records of ebs stg table using bank
			 * account and unique ref
			 */
	
//			List<BrsEbsStg> ebsBankList = brsEbsService.getBrsEbsStgData(uniqueRefNo, bankAcNo, "Bank");
	
			/**
			 * Load unreconciled book enteries from EBS table as well by matching unique ref
			 * and bank account no
			 */
//			List<BrsEbsStg> ebsBookList = brsEbsService.getBrsEbsStgData(uniqueRefNo, bankAcNo, "Book");
	
			/**
			 * Checking and loading bank statement records based on unique ref in book
			 * staging table make sure loading only unprocessed records, becuasse we are
			 * reading processed records from ebs table unreconciled
			 */
//			bankStmtList = brsBankStmtService.getBrsBankStmtData(uniqueRefNo, bankAcNo, "N");
			Long loaderProcessId=brsBankStmtService.getLoaderProcessId(uniqueRefNo, bankAcNo);
			log.info("loaderProcessId : "+loaderProcessId);
			
			if(loaderProcessId!=null) {
//				bankStmtList = brsBankStmtService.getBrsBankStmtData(uniqueRefNo, bankAcNo,loaderProcessId, uniqueRefNo, bankAcNo,loaderProcessId);
			
				bankStmtList=brsBankStmtService.getBrsBankStmtData(uniqueRefNo, bankAcNo, loaderProcessId);
				
				List<BrsBankStatementLineStg> processedList=brsBankStmtService.getBrsUnreconBankStmtData(uniqueRefNo, bankAcNo, loaderProcessId);
				
				if(processedList!=null&&!processedList.isEmpty()) {
					bankStmtList.addAll(processedList);
				}
			
			}
			
//			log.info("ebsBankList : "+ebsBankList.size());
//			log.info("ebsBookList : "+ebsBookList.size());
//			log.info("bankStmtList : "+bankStmtList.size());
	
//			if ((bankStmtList == null || bankStmtList.isEmpty()) && (ebsBankList == null || ebsBankList.isEmpty())) {
			if ((bankStmtList == null || bankStmtList.isEmpty()) ) {
				
//				String unmatchRef = util.getBkcRefId();
				String unmatchRef ="";
				if(processedRecord&&processedUnmatchNum!=null&&!"".equals(processedUnmatchNum)) {
					unmatchRef=processedUnmatchNum;
				}else {
					unmatchRef = util.getBkcRefId();
				}
				
				brsEbsList = util.getBrsEBSList(bookStmtList, AppConstants.UNRECONCILED, AppConstants.BANKSTMTNOTFOUND, "",unmatchRef);
				log.info("NO BANK RECORD , UNMATCH NUMBER : {}", unmatchRef);
				
				for (BrsConsoldtStg book : bookStmtList) {
					book.setStatus(AppConstants.UNRECONCILED);
					book.setErrorMsg(AppConstants.BANKSTMTNOTFOUND);
//					book.setUnmatchRef(unmatchNum);
				}
				
				if (brsEbsList != null && !brsEbsList.isEmpty()) {
					brsEbsService.saveEbsList(brsEbsList);
				}
				
				brsValidateList=util.getBrsValidateStgList(bookStmtList, AppConstants.UNRECONCILED, AppConstants.BANKSTMTNOTFOUND, "",unmatchRef);
				if (brsValidateList != null && !brsValidateList.isEmpty()) {
					brsValidateService.saveValidateList(brsValidateList);
				}
				
				return bookStmtList;
			}
	
	//		log.info("Bank Statement Records : {}", bankStmtList);
	
			/**
			 * Sum of the CRAMT and DRAMT of book statement and same need to be compared
			 * with the sum of amount in bank statement data
			 */
	
			double sumOfCrAmt = 0;
			double sumOfDrAmt = 0;
			double sumOfBankAmt = 0;
	
			for (BrsConsoldtStg book : bookStmtList) {
				sumOfCrAmt = sumOfCrAmt + book.getCrAmt();
				sumOfDrAmt = sumOfDrAmt + book.getDrAmt();
			}
	
//			for (BrsEbsStg ebsbook : ebsBookList) {
//				sumOfCrAmt = sumOfCrAmt + ebsbook.getCrAmt();
//				sumOfDrAmt = sumOfDrAmt + ebsbook.getDrAmt();
//			}
	
			for (BrsBankStatementLineStg bank : bankStmtList) {
				sumOfBankAmt = sumOfBankAmt + bank.getAmount();
			}
	
//			for (BrsEbsStg ebsbank : ebsBankList) {
////				sumOfBankAmt = sumOfBankAmt + ebsbank.getAmount();
//				
//				if(ebsbank.getTxnType()!=null&&!ebsbank.getTxnType().equals("")) {
//					if(ebsbank.getTxnType().trim().equalsIgnoreCase("CR")) {
//						sumOfBankAmt = sumOfBankAmt + ebsbank.getCrAmt();
//					}else if(ebsbank.getTxnType().trim().equalsIgnoreCase("DR")){
//						sumOfBankAmt = sumOfBankAmt + ebsbank.getDrAmt();
//					}
//				}
//			}
	
			if (sumOfCrAmt != 0 && sumOfCrAmt == sumOfBankAmt) {
	
				String matchNum = util.getMtchRefId();
				log.info("CR AMT MATCH NUMBER : {}", matchNum);
	
				// Record match , Match01
				brsEbsList = util.getBrsEBSList(bookStmtList, "Reconciled", " ", matchNum, "");
				if(bankStmtList!=null&&!bankStmtList.isEmpty()) {
					brsEbsList.addAll(util.getBrsEBSListForBank(bankStmtList, "Reconciled", " ", matchNum, ""));
				}
				
				brsValidateList=util.getBrsValidateStgList(bookStmtList, AppConstants.RECONCILED, " ", matchNum,"");
	
//				if (ebsBookList != null && !ebsBookList.isEmpty()) {
//	
//					for (BrsEbsStg ebs : ebsBookList) {
//						ebs.setStatus(AppConstants.RECONCILED);
//						ebs.setErrorMsg("");
//						ebs.setLastUpdateDate(new Date());
//						ebs.setMatchRef(matchNum);
//					}
//	
//					brsEbsList.addAll(ebsBookList);
//				}
	
//				if (ebsBankList != null && !ebsBankList.isEmpty()) {
//					for (BrsEbsStg ebs : ebsBankList) {
//						ebs.setStatus(AppConstants.RECONCILED);
//						ebs.setErrorMsg("");
//						ebs.setLastUpdateDate(new Date());
//						ebs.setMatchRef(matchNum);
//					}
//					brsEbsList.addAll(ebsBankList);
//				}
	
			} else if (sumOfDrAmt != 0 && sumOfDrAmt == sumOfBankAmt) {
				String matchNum = util.getMtchRefId();
				log.info("DR AMT MATCH NUMBER : {}", matchNum);
				brsEbsList = util.getBrsEBSList(bookStmtList, "Reconciled", " ", matchNum, "");
				
				if(bankStmtList!=null&&!bankStmtList.isEmpty()) {
					brsEbsList.addAll(util.getBrsEBSListForBank(bankStmtList, "Reconciled", " ", matchNum, ""));
				}
				
				brsValidateList=util.getBrsValidateStgList(bookStmtList, AppConstants.RECONCILED, " ", matchNum,"");
				
				System.out.println("AF EBS LIST "+brsEbsList.size());
	//			System.out.println("AF BOOK STMT LIST "+bookStmtList.size());
	
//				if (ebsBookList != null && !ebsBookList.isEmpty()) {
//					for (BrsEbsStg ebs : ebsBookList) {
//						ebs.setStatus(AppConstants.RECONCILED);
//						ebs.setErrorMsg(" ");
//						ebs.setLastUpdateDate(new Date());
//						ebs.setMatchRef(matchNum);
//					}
//	
//					brsEbsList.addAll(ebsBookList);
//				}
	
//				if (ebsBankList != null && !ebsBankList.isEmpty()) {
//					for (BrsEbsStg ebs : ebsBankList) {
//						ebs.setStatus(AppConstants.RECONCILED);
//						ebs.setErrorMsg("");
//						ebs.setLastUpdateDate(new Date());
//						ebs.setMatchRef(matchNum);
//					}
//					brsEbsList.addAll(ebsBankList);
//				}
	
			} else {
//				String unmatchRef = util.getUnmtchRefId();
				String unmatchRef ="";
				if(processedRecord&&processedUnmatchNum!=null&&!"".equals(processedUnmatchNum)) {
					unmatchRef=processedUnmatchNum;
				}else {
					unmatchRef = util.getBkcRefId();
				}
				log.info("NOT MATCHED WITH BANK ACCOUNT, UNMATCH NUMBER : {}", unmatchRef);
	
				brsEbsList = util.getBrsEBSList(bookStmtList, "Unreconciled", "Amount not matched.", "", unmatchRef);
				if(bankStmtList!=null&&!bankStmtList.isEmpty()) {
					brsEbsList.addAll(util.getBrsEBSListForBank(bankStmtList, "Unreconciled", "Amount not matched.", "", unmatchRef));
				}
				brsValidateList=util.getBrsValidateStgList(bookStmtList, AppConstants.UNRECONCILED, "Amount not matched.", "",unmatchRef);
			}
	
			if (brsEbsList != null && !brsEbsList.isEmpty()) {
//				log.info("brsEbsList : "+brsEbsList.size());
	//			log.info("brsEbsList : "+brsEbsList);
				
				try {
					brsEbsService.saveEbsList(brsEbsList);
				}catch(Exception e) {
					e.printStackTrace();
				}
			}
			
			if (bankStmtList != null && !bankStmtList.isEmpty()) {
				bankStmtList.forEach(bs -> bs.setProcessFlag("Y")); // update bank statement process flag
				brsBankStmtService.saveBankList(bankStmtList);
			}
			
			if (brsValidateList != null && !brsValidateList.isEmpty()) {
				brsValidateService.saveValidateList(brsValidateList);
			}
		
		}catch(Exception e) {
			BrsError error=util.getErrorDetails("Book", refId, bankAcNo, uniqueRefNo, "Exception");
			errorService.saveError(error);
			log.error(error.toString(), e);
		}
		
		
		
		return bookStmtList;
	}

}
